generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum RoleId {
  BRAND
  DESIGNER
  MANUFACTURER
}

model Role {
  id          RoleId
  key         Int    @id @default(autoincrement())
  title       String
  description String
  icon        String
}

enum PieceMaterial {
  JEANS
  SILK
  COTTON
  LINEN
  WOOL
  LEATHER
  POLYESTER
}

enum PieceType {
  SHIRT
  SKIRT
  PANTS
  JACKET
  BLOUSE
  DRESS
  CAP
  HEADWARMER
}

enum CreatorType {
  DESIGNER
  MANUFACTURER
}

enum SketchView {
  FRONT
  SIDE1
  SIDE2
  BACK
}

model User {
  key            Int             @id @default(autoincrement())
  onboarded      Boolean         @default(false)
  id             String          @unique
  email          String
  fullname       String
  avatar         String
  role           RoleId
  brand          Brand?
  creatorProfile CreatorProfile?
  createdAt      DateTime?       @default(now())
  updatedAt      DateTime?       @default(now())
}

model Brand {
  key         Int       @id @default(autoincrement())
  email       String
  name        String
  bio         String
  ownerId     String    @unique
  owner       User      @relation(fields: [ownerId], references: [id])
  city        String
  lat         String
  lng         String
  countryCode String
  province1   String?
  province2   String?
  zip         String?
  Design      Design[]
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @default(now())
}

model CreatorProfile {
  key            Int              @id @default(autoincrement())
  email          String
  name           String
  bio            String
  ownerId        String           @unique
  owner          User             @relation(fields: [ownerId], references: [id])
  city           String
  lat            String
  lng            String
  countryCode    String
  province1      String?
  province2      String?
  zip            String?
  createdAt      DateTime?        @default(now())
  updatedAt      DateTime?        @default(now())
  JobApplication JobApplication[]
  skills         CreatorSkill[]
  CreatorWork    CreatorWork[]
}

model CreatorSkill {
  key      Int              @id @default(autoincrement())
  title    String           @unique
  id       String           @unique
  creators CreatorProfile[]
}

model CreatorWork {
  key         Int            @id @default(autoincrement())
  id          String         @unique
  title       String
  description String?
  tags        String[]
  shots       String[]
  creatorId   String
  creator     CreatorProfile @relation(fields: [creatorId], references: [ownerId])
}

model Design {
  key               Int           @id @default(autoincrement())
  id                String        @unique
  name              String?
  brandId           String
  txHash            String?       @unique
  brand             Brand         @relation(fields: [brandId], references: [ownerId])
  prompt            String?
  imagePrompt       String?
  promptResults     String[]
  preDesignedPrints String[]
  createdAt         DateTime?     @default(now())
  updatedAt         DateTime?     @default(now())
  jobs              Job[]
  sketches          Sketch[]
  pieces            DesignPiece[]
}

model DesignPiece {
  key           Int           @id @default(autoincrement())
  id            String        @unique
  pieceCount    Int
  pricePerPiece Int
  designId      String
  Design        Design        @relation(fields: [designId], references: [id])
  type          PieceType
  material      PieceMaterial
  createdAt     DateTime?     @default(now())
  updatedAt     DateTime?     @default(now())
}

model Sketch {
  key      Int        @id @default(autoincrement())
  id       String     @unique
  url      String
  designId String
  design   Design     @relation(fields: [designId], references: [id])
  view     SketchView
}

model Job {
  key          Int              @id @default(autoincrement())
  id           String           @unique
  designId     String
  design       Design           @relation(fields: [designId], references: [id])
  target       CreatorType
  applications JobApplication[]

  @@unique([designId, target])
}

model JobApplication {
  key         Int            @id @default(autoincrement())
  id          String         @unique
  jobId       String
  applicantId String
  job         Job            @relation(fields: [jobId], references: [id])
  applicant   CreatorProfile @relation(fields: [applicantId], references: [ownerId])
}
